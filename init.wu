#   LÖWR: LöVR bindings for the Wu programming language

#    (C) 2021 Nelson "darltrash" Lopez
#
#    This software is provided 'as-is', without any express or implied
#    warranty.  In no event will the authors be held liable for any damages
#    arising from the use of this software.
#
#    Permission is granted to anyone to use this software for any purpose,
#    including commercial applications, and to alter it and redistribute it
#    freely, subject to the following restrictions:
#
#    1. The origin of this software must not be misrepresented; you must not
#        claim that you wrote the original software. If you use this software
#        in a product, an acknowledgment in the product documentation would be
#        appreciated but is not required.
#    2. Altered source versions must be plainly marked as such, and must not be
#        misrepresented as being the original software.
#    3. This notice may not be removed or altered from any source distribution.

import types {Source, Blob, Image, ModelData, Rasterizer, Sound, Canvas, Font, Material, Mesh, Model, Shader, ShaderBlock, Texture, Curve, Mat4, Quat, RandomGenerator, Vec2, Vec3, Vec4, Vectors, BallJoint, BoxShape, CapsuleShape, Collider, CylinderShape, DistanceJoint, HingeJoint, Joint, Shape, SliderJoint, SphereShape, World, Channel, Thread}

getVersion: extern fun() -> (float, float?, float?) = "lovr.getVersion"
_requirepatch: extern any = "package.loaded"
_lovrOrigin: extern any = "lovr"

setConf: extern fun(fun(any)) = "function(any)lovr.conf=any;end"
setDraw: extern fun(fun()) = "function(any)lovr.draw=any;end"
setErrhand: extern fun(fun(str, str?) -> any) = "function(any)lovr.errhand=any;end"
setFocus: extern fun(fun(bool)) = "function(any)lovr.focus=any;end"
setKeypressed: extern fun(fun(str, float?, bool?)) = "function(any)lovr.keypressed=any;end"
setKeyreleased: extern fun(fun(str, float?)) = "function(any)lovr.keyreleased=any;end"
setLoad: extern fun(fun(any)) = "function(any)lovr.load=any;end"
setLog: extern fun(fun(str, str?, str?)) = "function(any)lovr.log=any;end"
setMirror: extern fun(fun()) = "function(any)lovr.mirror=any;end"
setPermission: extern fun(fun(str, bool?)) = "function(any)lovr.permission=any;end"
setQuit: extern fun(fun() -> bool) = "function(any)lovr.quit=any;end"
setResize: extern fun(fun(float, float?)) = "function(any)lovr.resize=any;end"
setRestart: extern fun(fun() -> any) = "function(any)lovr.restart=any;end"
setRun: extern fun(fun() -> any) = "function(any)lovr.run=any;end"
setTextinput: extern fun(fun(str, float?)) = "function(any)lovr.textinput=any;end"
setThreaderror: extern fun(fun(Thread, str?)) = "function(any)lovr.threaderror=any;end"
setUpdate: extern fun(fun(float)) = "function(any)lovr.update=any;end"

_requirepatch["lowr.audio"] = _lovrOrigin audio
import audio

_requirepatch["lowr.data"] = _lovrOrigin data
import data

_requirepatch["lowr.event"] = _lovrOrigin event
import event

_requirepatch["lowr.filesystem"] = _lovrOrigin filesystem
import filesystem

_requirepatch["lowr.graphics"] = _lovrOrigin graphics
import graphics

_requirepatch["lowr.headset"] = _lovrOrigin headset
import headset

_requirepatch["lowr.math"] = _lovrOrigin math
import math

_requirepatch["lowr.physics"] = _lovrOrigin physics
import physics

_requirepatch["lowr.system"] = _lovrOrigin system
import system

_requirepatch["lowr.thread"] = _lovrOrigin thread
import thread

_requirepatch["lowr.timer"] = _lovrOrigin timer
import timer

